{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { styles } from \".././style\";\nimport { db } from \"../firebase/firebase-config\";\nimport { onSnapshot, collection, setDoc, doc } from 'firebase/firestore';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function NameScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      usernames = _useState2[0],\n      setUsernames = _useState2[1];\n\n  var fingerPrint = function _callee(name) {\n    var fireRef;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(name);\n            fireRef = collection(db, \"attendance\");\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(setDoc(doc(fireRef, \"biometrics\"), {\n              name: name\n            }));\n\n          case 4:\n            console.log(\"...\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    return onSnapshot(collection(db, \"identity\"), function (snapshot) {\n      return setUsernames(snapshot.docs.map(function (doc) {\n        return doc.data();\n      }));\n    });\n  }, []);\n  return _jsx(ScrollView, {\n    children: _jsxs(SafeAreaView, {\n      style: styles.appScreen,\n      children: [_jsx(StatusBar, {\n        style: styles.statusbar\n      }), usernames.map(function (value) {\n        return _jsx(TouchableOpacity, {\n          style: styles.nameTouch,\n          onPress: function onPress() {\n            return fingerPrint(value.firstname);\n          },\n          children: _jsx(Text, {\n            style: styles.touchables,\n            children: value.firstname\n          })\n        });\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","SafeAreaView","styles","db","onSnapshot","collection","setDoc","doc","NameScreen","usernames","setUsernames","fingerPrint","name","console","log","fireRef","snapshot","docs","map","data","appScreen","statusbar","value","nameTouch","firstname","touchables"],"sources":["C:/xampp/htdocs/host/rocksec/rocksec-app/components/NameScreen.js"],"sourcesContent":["import  React, { useState, useEffect} from 'react';\r\nimport { Text,TouchableOpacity ,ScrollView,StatusBar} from 'react-native';\r\nimport { SafeAreaView } from 'react-native-safe-area-context';\r\nimport { styles } from '.././style';\r\n//firestore \r\nimport { db } from '../firebase/firebase-config';\r\nimport { onSnapshot,collection,setDoc,doc} from 'firebase/firestore';\r\n\r\nexport default function NameScreen() {\r\n\r\n\r\n  /**states */\r\n  const [usernames,setUsernames] = useState([]);\r\n\r\n\r\n  /**\r\n   * push the data to cloud firebase\r\n   */\r\n  const fingerPrint = async(name)=>{\r\n    console.log(name);\r\n    const fireRef = collection(db, \"attendance\");\r\n    await setDoc(doc(fireRef, `biometrics`), {\r\n      name: name\r\n    });\r\n    console.log(\"...\");\r\n  }\r\n\r\n\r\n  /**\r\n   * on snapshot so that when data \r\n   * changes it should update automatically\r\n   */\r\n  useEffect(\r\n    () => \r\n      onSnapshot(collection(db,\"identity\"), (snapshot) =>\r\n        setUsernames(snapshot.docs.map( (doc) => doc.data()))\r\n      ),\r\n    []\r\n  );\r\n  \r\n\r\n  return (\r\n    <ScrollView>\r\n      <SafeAreaView style={styles.appScreen}>\r\n\r\n        <StatusBar style={styles.statusbar}></StatusBar>\r\n\r\n        {usernames.map((value) => (\r\n        <TouchableOpacity style={styles.nameTouch}\r\n           onPress={() =>fingerPrint(value.firstname)}> \r\n          <Text style={styles.touchables}>{value.firstname}</Text>\r\n        </TouchableOpacity>\r\n        ))}\r\n        \r\n      </SafeAreaView>\r\n    </ScrollView>\r\n  );\r\n\r\n} \r\n"],"mappings":";;AAAA,OAAQA,KAAR,IAAiBC,QAAjB,EAA2BC,SAA3B,QAA2C,OAA3C;;;;;AAEA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,MAAT;AAEA,SAASC,EAAT;AACA,SAASC,UAAT,EAAoBC,UAApB,EAA+BC,MAA/B,EAAsCC,GAAtC,QAAgD,oBAAhD;;;AAEA,eAAe,SAASC,UAAT,GAAsB;EAInC,gBAAiCT,QAAQ,CAAC,EAAD,CAAzC;EAAA;EAAA,IAAOU,SAAP;EAAA,IAAiBC,YAAjB;;EAMA,IAAMC,WAAW,GAAG,iBAAMC,IAAN;IAAA;IAAA;MAAA;QAAA;UAAA;YAClBC,OAAO,CAACC,GAAR,CAAYF,IAAZ;YACMG,OAFY,GAEFV,UAAU,CAACF,EAAD,EAAK,YAAL,CAFR;YAAA;YAAA,iCAGZG,MAAM,CAACC,GAAG,CAACQ,OAAD,eAAJ,EAA6B;cACvCH,IAAI,EAAEA;YADiC,CAA7B,CAHM;;UAAA;YAMlBC,OAAO,CAACC,GAAR,CAAY,KAAZ;;UANkB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAApB;;EAcAd,SAAS,CACP;IAAA,OACEI,UAAU,CAACC,UAAU,CAACF,EAAD,EAAI,UAAJ,CAAX,EAA4B,UAACa,QAAD;MAAA,OACpCN,YAAY,CAACM,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAmB,UAACX,GAAD;QAAA,OAASA,GAAG,CAACY,IAAJ,EAAT;MAAA,CAAnB,CAAD,CADwB;IAAA,CAA5B,CADZ;EAAA,CADO,EAKP,EALO,CAAT;EASA,OACE,KAAC,UAAD;IAAA,UACE,MAAC,YAAD;MAAc,KAAK,EAAEjB,MAAM,CAACkB,SAA5B;MAAA,WAEE,KAAC,SAAD;QAAW,KAAK,EAAElB,MAAM,CAACmB;MAAzB,EAFF,EAIGZ,SAAS,CAACS,GAAV,CAAc,UAACI,KAAD;QAAA,OACf,KAAC,gBAAD;UAAkB,KAAK,EAAEpB,MAAM,CAACqB,SAAhC;UACG,OAAO,EAAE;YAAA,OAAKZ,WAAW,CAACW,KAAK,CAACE,SAAP,CAAhB;UAAA,CADZ;UAAA,UAEE,KAAC,IAAD;YAAM,KAAK,EAAEtB,MAAM,CAACuB,UAApB;YAAA,UAAiCH,KAAK,CAACE;UAAvC;QAFF,EADe;MAAA,CAAd,CAJH;IAAA;EADF,EADF;AAiBD"},"metadata":{},"sourceType":"module"}